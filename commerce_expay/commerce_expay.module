<?php

/**
 * Module for processing payments via Expay API.
 */

// getMethods response statuses.
define('EXPAY_GETMETHOD_SUCCESS_STATUS', 200);
// getStatus response statuses
define('EXPAY_GETSTATUS_PROCESSING_QUEUE', 201);
define('EXPAY_GETSTATUS_PROCESSING', 203);
define('EXPAY_GETSTATUS_REJECTED', 204);
define('EXPAY_GETSTATUS_SUCCESS', 205);
define('EXPAY_GETSTATUS_WAITING_PAYER', 206);
define('EXPAY_GETSTATUS_RETURNED', 207);


module_load_include('php','commerce_expay','includes/expay/request_expay');
module_load_include('inc','commerce_expay','includes/commerce_expay');

/**
 * Implementation of hook_menu().
 */
function commerce_expay_menu() {
  $items = array();

  $items['admin/config/payment/expay'] = array(
    'title' => 'Expay settings',
    'description' => 'Configure Expay merchant settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_expay_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'commerce_expay.admin.inc',
  );
  // Define an always accessible path to receive payment notifications.
  $items['commerce_expay/pn'] = array(
    'page callback' => 'commerce_expay_process_pn',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  // Define an additional PN path that is redirect specific.
  $items['commerce_expay/pn/%'] = array(
    'page callback' => 'commerce_expay_process_pn',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function commerce_expay_process_pn($type = NULL) {
  $post = $_POST;
  $params = drupal_get_query_parameters();

  $response_data = array();

  $handler = commerce_expay_getaway();

  // Clear redirect from Expay
  if (!empty($type)) {
    $response = commerce_expay_process_pn_redirect($params, $type);
  }
  else {
    $valid_ip = commerce_expay_callback_check_ip();
    if (!$valid_ip) {
      drupal_add_http_header('HTTP/1.1', '503 Service Temporarily Unavailable');
      drupal_add_http_header('Status', '503 Service Temporarily Unavailable');
      exit;
    }
    else {
      $response = commerce_expay_process_pn_callback($post);
    }

  }

  if (!empty($response)) {
    $data = $handler->call_class->response_expay($response);
    if ($data) {
      print $data;
      exit;
    }
  }
}

/**
 * Expay redirect callback.
 *
 * @param  array $params
 *   Params recieved by GET.
 * @param  string $type
 *   Redirect type url.
 */
function commerce_expay_process_pn_redirect($params = array(), $type = '') {
  $response = array();

  if (empty($params) || empty($params['pid']) || empty($params['order'])) {
    drupal_not_found();
  }

  if (empty($type)) {
    drupal_not_found();
  }

  $debug = variable_get('commerce_expay_debug_mode', 0);
  if ($debug) {
    watchdog('commerce_expay', 'Callback redirect: <br /> <pre>@params</pre>', array('@params' => print_r($params, TRUE)), WATCHDOG_NOTICE);
  }

  $remote_payment_id = $params['pid'];
  $remote_payment_order = $params['order'];

  $order_id = commerce_expay_remote_order_parse($remote_payment_order, 'order');

  if (empty($order_id)) {
    drupal_not_found();
  }

  $order = commerce_order_load($order_id);
  if (empty($order)) {
    drupal_not_found();
  }
  // Check if payment method exists.
  // Redirect user on prev. step and cancel transaction otherwise.
  $is_expay_method = FALSE;
  if (!empty($order->data['payment_method'])) {
    list($method_id, $rule_name) = explode('|', $order->data['payment_method']);
    if (strpos($method_id, 'expay_method_') !== FALSE) {
      $is_expay_method = TRUE;
    }
    $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  }
  else {
    $payment_method = FALSE;
  }
  if ($is_expay_method) {
    if (!$payment_method || empty($payment_method['base'])) {
      //Getting transaction to cancel.
      $payment_id = commerce_expay_remote_order_parse($remote_payment_order, 'transaction');
      $options = array(
        'transaction_id' => $payment_id,
        'order_id' => $order_id
      );
      $transactions = commerce_payment_transaction_load_multiple(array(), $options);
      if (empty($transactions)) {
        commerce_payment_redirect_pane_previous_page($order, t('Payment canceled payment at the payment gateway.'));
        drupal_goto(commerce_checkout_order_uri($order));
      }
      // Update transaction status.
      $transaction = end($transactions);
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      commerce_payment_transaction_save($transaction);
      $error_message = t('There was a problem processing your transaction. Please try again later.');
      drupal_set_message(check_plain($error_message), 'error', TRUE);
      // Update order status.
      commerce_payment_redirect_pane_previous_page($order, t('Payment canceled payment at the payment gateway.'));
      drupal_goto(commerce_checkout_order_uri($order));
    }
  }

  switch ($type) {
    case 'success':
      $redirect = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE, 'query' => $params));
      drupal_goto($redirect);
      break;

    case 'waiting':
      $redirect = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE, 'query' => $params));
      drupal_goto($redirect);
      break;

    case 'cancel':
      $redirect = url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE, 'query' => $params));
      drupal_goto($redirect);
      break;
  }
  return $response;
}

/**
 * Expay notification callback.
 *
 * @param  array $post
 *   POST data.
 */
function commerce_expay_process_pn_callback($post = array()) {
  // Default respnse.
  $response = array('status' => '500', 'message' => "Internal server error");
  if (empty($post)) {
    return $response;
  }
  // Debug request.
  $debug = variable_get('commerce_expay_debug_mode', 0);
  if ($debug) {
    watchdog('commerce_expay', 'Callback notification: <br /> <pre>@notificaation</pre>', array('@notificaation' => print_r($post, TRUE)), WATCHDOG_NOTICE);
  }
  // Try to init expay class.
  $handler = commerce_expay_getaway();
  if (empty($handler)) {
    $errors = $handler->call_class->getinfoexpayerror();
    return array('status' => $errors['code'], 'message' => $errors['message']);
  }
  // Try parse post request.
  try {
    $method = $handler->call_class->parse_post($post);
  }
  catch (Exception $e) {
    $errors = $handler->call_class->getinfoexpayerror();
    return array('status' => $errors['code'], 'message' => $errors['message']);
  }
  // Check if parse post was successful
  if (empty($method)) {
    $errors = $handler->call_class->getinfoexpayerror();
    return array('status' => $errors['code'], 'message' => $errors['message']);
  }
  // Validate callcback request.
  $validate = $handler->callback_method_validate($method, $post);
  if (!$validate) {
    $response = $handler->response;
    $transaction = $handler->callback_method_transaction();
    if (!empty($transaction)) {
      commerce_expay_cancel_transaction($transaction, $response);
      $order = commerce_order_load($transaction->order_id);
      $order->status = 'canceled';
      commerce_order_save($order);
    }
    return $response;
  }
  // Getting current commerce transaction.
  $transaction = $handler->callback_method_transaction();
  // Loading order.
  $order = commerce_order_load($transaction->order_id);
  // Log callback request into transaction payload.
  $transaction->payload['expay_updates'][] = array(
    'type' => $method,
    'data' => $post
  );
  $remote_payment_id = $post['id'];
  $remote_payment_order = $post['order'];
  // Calling methods responses.
  if ($method == 'check') {
    $response = commerce_expay_check_response($transaction);
  }
  if ($method == 'pay') {
    //commerce_expay_transaction_status_update($transaction, $remote_payment_order, $force_save = FALSE);
    if ($transaction->status == COMMERCE_PAYMENT_STATUS_PENDING) {
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    }
    $response = commerce_expay_pay_response($transaction);
  }
  if ($method == 'status') {
    //commerce_expay_transaction_status_update($transaction, $remote_payment_order, $force_save = FALSE);
    $response = commerce_expay_status_response($transaction);
  }

  commerce_payment_transaction_save($transaction);

  rules_invoke_all('commerce_expay_transaction_callback_update', $method,
    $transaction);

  return $response;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_expay_commerce_payment_method_info() {
  $payment_methods = array();
  $methods = commerce_expay_get_methods();
  if (!empty($methods)) {
    foreach ($methods as $method) {
      $payment_methods['expay_method_' . $method['id']] = array(
        'title' => t('Expay - ' . $method['name']),
        'description' => t('Payment using the !provider provider.', array('!provider' => $method['name'])),
        'display_title' => $method['name'],
        // All Expay methods consider to be offline.
        // We need to display additional information on redirect form.
        // For more info look into implementation payment redirect form.
        'offsite' => ($method['type'] == 'online') ? TRUE : FALSE,
        'active' => TRUE,
        'base' => 'commerce_expay'
      );
    }
  }
  return $payment_methods;
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_expay_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['expay_complete'] = array(
    'title' => t('Expay complete data'),
    'file' => 'includes/commerce_expay.checkout_pane.inc',
    'base' => 'commerce_expay_complete_pane',
    'page' => 'complete',
    'fieldset' => FALSE,
    'locked' => TRUE,
    'weight' => -1,
  );

  return $checkout_panes;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_expay_form_commerce_checkout_form_alter(&$form, &$form_state) {
  // If this checkout form contains the payment method radios...
  if (!empty($form['commerce_payment']['payment_method']['#options'])) {
    if (!empty($form_state['values']['commerce_payment']['expay_methods'])) {
      $methods = $form_state['values']['commerce_payment']['expay_methods'];
    }
    elseif (!empty($form_state['values']['commerce_payment']['payment_details']['expay_methods'])) {
      $methods = $form_state['values']['commerce_payment']['payment_details']['expay_methods'];
    }
    elseif (!empty($form['commerce_payment']['payment_details']['expay_methods'])) {
      $methods = $form['commerce_payment']['payment_details']['expay_methods']['#value'];
    }
    else {
      $methods = commerce_expay_get_methods(TRUE);
      $form['commerce_payment']['expay_methods'] = array(
        '#type' => 'value',
        '#value' => $methods
      );
    }

    if (empty($methods)) {
      drupal_set_message(t('Some payments gateway are unavailable now.'), 'error');
      return;
    }
    // Looking for a Expay methods.
    foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
      list($method_id, $rule_name) = explode('|', $key);
      // If we find Expay method ...
      if (strpos($method_id, 'expay_method_') !== FALSE) {
        $method_id = _commerce_expay_payment_method_id(array('method_id' => $method_id));
        if (empty($methods[$method_id])) {
          unset($form['commerce_payment']['payment_method']['#options'][$key]);
          continue;
        }
        $method = $methods[$method_id];
        if (empty($method['type'])) {
          unset($form['commerce_payment']['payment_method']['#options'][$key]);
          continue;
        }

        $logo_url = commerce_expay_method_logo_url($method);
        if (empty($logo_url)) {
          continue;
        }
        $variables = array(
          'path' => $logo_url,
          'alt' => $value,
          'title' => $value,
          'attributes' => array('class' => 'expay-payment-method-logo'),
        );
        $logo = theme('image', $variables);
        $value = $logo . $value;
      }
    }
    // Add the CSS.
    $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_expay') . '/theme/commerce_expay.theme.css';
  }
}


/**
 * Payment method callback: checkout form.
 */
function commerce_expay_submit_form($payment_method, &$pane_values, $checkout_pane, $order) {
  // Getting selected expay payment method.
  $expay_method_id = _commerce_expay_payment_method_id($payment_method);
  // Getting list of methods.
  if (empty($pane_values['expay_methods'])) {
    $expay_methods = commerce_expay_get_methods();
  }
  else {
    $expay_methods = $pane_values['expay_methods'];
  }

  $form['expay_methods'] = array(
    '#type' => 'value',
    '#value' => $expay_methods
  );

  $expay_method = array();
  if (!empty($expay_methods[$expay_method_id])) {
    $expay_method = $expay_methods[$expay_method_id];
  }

  $form['expay_payment'] = array(
    '#tree' => TRUE
  );

  $form['expay_payment']['expay_payment_fields'] = array(
    '#type' => 'container',
    '#tree' => TRUE
  );
  // Adding extra fields if needed.
  $fields = commerce_expay_provider_fields($expay_method);
  if (!empty($fields)) {
    $form['expay_payment']['expay_payment_fields']['info'] = array(
      '#type' => 'item',
      '#markup' => '<p>' . t('Please provide additional information') . '</p>',
    );
    $form['expay_payment']['expay_payment_fields'] += $fields;
  }

  return $form;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_expay_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  $validate = TRUE;
  $expay_method_id = _commerce_expay_payment_method_id($payment_method);
  $expay_methods = $pane_values['expay_methods'];
  $expay_method = array();
  if (empty($expay_methods[$expay_method_id])) {
    return FALSE;
  }
  $expay_method = $expay_methods[$expay_method_id];
  $balance = commerce_payment_order_balance($order);
  if (empty($balance) || $balance['amount'] == 0) {
    return FALSE;
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $amount = $order_wrapper->commerce_order_total->amount->value();
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();

  $expay_method = $expay_methods[$expay_method_id];

  $max_amount = (!empty($expay_method['max'])) ? commerce_currency_decimal_to_amount($expay_method['max'], $currency_code) : 0;
  $min_amount = (!empty($expay_method['min'])) ? commerce_currency_decimal_to_amount($expay_method['min'], $currency_code) : 0;
  $fix = (!empty($expay_method['commission']['fix'])) ? commerce_currency_decimal_to_amount($expay_method['commission']['fix'], $currency_code) : 0;
  $rate = (!empty($expay_method['commission']['rate'])) ? $expay_method['commission']['rate'] : 0;

  if (!empty($min_amount) && ($amount < $min_amount)) {
    drupal_set_message(t('Wrong payment amount (< min)'), 'error');
    $validate = FALSE;
  }
  if (!empty($max_amount) && ($amount > $max_amount)) {
    drupal_set_message(t('Wrong payment amount (> max)'), 'error');
    $validate = FALSE;
  }
  if ($amount <= (($amount * $rate) + $fix)) {
    drupal_set_message(t('Wrong payment amount (Out of range)'), 'error');
    $validate = FALSE;
  }

  if (!empty($expay_method['attributes'])) {
    $expay_method_attributes = $expay_method['attributes'];
    $fields_values = $pane_values['expay_payment']['expay_payment_fields'];
    foreach ($expay_method_attributes as $attribute) {
      $regexp = $attribute['regexp'];
      if (empty($regexp)) {
        continue;
      }
      if (empty($fields_values[$attribute['key']])) {
        continue;
      }
      $value = $fields_values[$attribute['key']];
      if (!preg_match('/' . $regexp . '/', $value)) {
        $element_key = implode('][', array_merge($form_parents, array('expay_payment', 'expay_payment_fields', $attribute['key'])));
        form_set_error($element_key, t('Please enter a valid information for "@field".', array('@field' => $attribute['name'])));
        $validate = FALSE;
      }
    }
  }

  return $validate;
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_expay_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {


  $expay_method_id = _commerce_expay_payment_method_id($payment_method);
  $expay_methods = $pane_values['expay_methods'];
  $expay_method = $expay_methods[$expay_method_id];

  $transaction = commerce_payment_transaction_new('commerce_expay', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->payload['expay_method'] = $expay_method;
  $transaction->payload['attributes'] = array();
  $transaction->payload['expay_payment'] = array();
  if (!empty($expay_method['attributes'])) {
    $values = $pane_values['expay_payment'];
    foreach ($expay_method['attributes'] as $field) {
      $field_key = $field['key'];
      if (!empty($values['expay_payment_fields'][$field_key])) {
        $transaction->payload['attributes'][$field_key] = $values['expay_payment_fields'][$field_key];
      }
    }
  }
  commerce_payment_transaction_save($transaction);
  // Getting price.
  $amount = commerce_currency_round($charge['amount'], commerce_currency_load($charge['currency_code']));
  $price = number_format(commerce_currency_amount_to_decimal($amount, $charge['currency_code']), 2, '.', '');
  // Setting initPayment params.
  $payment_init_params = array(
    'service_id' => $expay_method['id'],
    'amount' => $price,
    'order' => _commerce_expay_transaction_id($order->order_id, $transaction->transaction_id),
    '_successUrl' => url('commerce_expay/pn/success', array('absolute' => TRUE)),
    '_rejectUrl' => url('commerce_expay/pn/cancel', array('absolute' => TRUE))
  );
  // Setting additional attributes if exists.
  if (!empty($transaction->payload['attributes'])) {
    foreach ($transaction->payload['attributes'] as $key => $value) {
      $payment_init_params[$key] = $value;
    }
  }
  // Try to init remote payment.
  try {
    $handler = new commerceExpay();
    $remote_payment = $handler->payment($payment_init_params);
  }
  catch (ExpayException $e) {
     watchdog('commerce_expay', $e->getMessage(), NULL, WATCHDOG_ERROR);
  }
  $error_message = t('There was a problem processing your transaction. Please try again later.');
  if (empty($remote_payment)) {
    $errors = $handler->getinfoexpayerror();
    $transaction->payload['expay_payment'] = $errors;
    $transaction->remote_status = $errors['code'];
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->message = 'FAIL initPayment from Expay';
    watchdog('commerce_expay', 'Commerce payment transaction @id canceled on redirect form', array('@id' => $transaction->transaction_id), WATCHDOG_NOTICE);
    drupal_set_message(check_plain($error_message), 'error');
    commerce_payment_transaction_save($transaction);
    return FALSE;
  }
  else {
    $transaction->payload['expay_payment'] = $remote_payment;
    $transaction->remote_id = $remote_payment['id'];
    $transaction->remote_status = $remote_payment['status'];
    $transaction->message = 'Success initPayment from Expay';
    commerce_payment_transaction_save($transaction);
  }

}

/**
 * Payment method callback: redirect form.
 */
function commerce_expay_redirect_form($form, &$form_state, $order, $payment_method) {
  // Setting default error message.
  //$error_message = t('There was a problem processing your transaction. Please try again later.');
  // Perams to filter valid transactions.
  $options = array(
    'order_id' => $order->order_id,
    'status' => COMMERCE_PAYMENT_STATUS_PENDING,
    'payment_method' => 'commerce_expay'
  );
  $transactions = commerce_payment_transaction_load_multiple(array(), $options);
  if (count($transactions) > 0) {
    // Use last transaction.
    $transaction = end($transactions);
  }
  else {
    // In case there are no valid transactions.
    drupal_set_message(check_plain($error_message), 'error');
    // Redirect order on previous step.
    commerce_payment_redirect_pane_previous_page($order, t('Customer payment submission failed at the payment gateway.'));
    drupal_goto(commerce_checkout_order_uri($order));
  }
  // $init_remote = FALSE;
  if (!empty($transaction->payload['expay_payment'])) {
    $remote_payment = $transaction->payload['expay_payment'];
  }
  // It can be redirect url, QR code or PDF direct link.
  $remote_data = commerce_expay_payment_data($remote_payment);
  // Setting standart cancel link to display on payment redirect form.
  $cancel_link = l(t('Cancel and return'), 'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  // Customer need to be redirected on remote payment service provider.
  $form['redirect_url'] = array(
    '#type' => 'value',
    '#value' => $remote_data['value']
  );
  $form['cancel_link'] = array(
    '#type' => 'item',
    '#markup' => $cancel_link,
    '#attributes' => array('class' => array('cancel-payment-link')),
    '#weight' => 20
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Continue on @method', array('@method' => $payment_method['display_title'])),
    '#weight' => 21,
    '#submit' => array('commerce_expay_redirect_form_submit_redirect')
  );

  return $form;
}

/**
 * Helper submit to proceed customer with redirect on external service.
 */
function commerce_expay_redirect_form_submit_redirect($form, &$form_state) {
  $values = $form_state['values'];
  $redirect_url = $values['redirect_url'];
  drupal_goto($redirect_url);
}

/**
 * Helper submit to proceed customer with redirect in user zone order view.
 */
function commerce_expay_redirect_form_submit_view_order($form, &$form_state) {
  $order = $form_state['order'];
  $redirect_url = url('user/' . $order->uid . '/orders/' . $order->order_id, array('absolute' => TRUE));
  drupal_goto($redirect_url);
}

/**
 * Helper submit to proceed customer with next checkout step.
 */
function commerce_expay_redirect_form_submit_next($form, &$form_state) {
  $order = $form_state['order'];
  commerce_payment_redirect_pane_next_page($order, t('Customer successfully submitted payment at the payment gateway.'));
  drupal_goto(commerce_checkout_order_uri($order));
}

/**
 * Validate payment by checking status of last transaction.
 *
 * @param commerce_order $order
 *  The Commerce Order.
 * @param array $payment_method
 *  The payment method.
 * @return bool
 *  Return TRUE if the form validates.
 */
function commerce_expay_redirect_form_validate($order, $payment_method) {
  $validate = TRUE;
  $params = drupal_get_query_parameters();

  if (empty($params)) {
    watchdog('commerce_expay', 'Empty params for order @order during return redirect', array('@order' => $order->order_id), WATCHDOG_NOTICE);
    $validate = FALSE;
    return $validate;
  }

  if (empty($params['pid']) || empty($params['order'])) {
    watchdog('commerce_expay', 'Missing required params for order @order during return redirect', array('@order' => $order->order_id), WATCHDOG_NOTICE);
    $validate = FALSE;
  }

  $remote_payment_id = $params['pid'];
  $remote_payment_order = $params['order'];

  $options = array(
    'order_id' => $order->order_id,
    'remote_id' => $remote_payment_id
  );

  $transactions = commerce_payment_transaction_load_multiple(array(), $options);
  if (count($transactions) == 0) {
    watchdog('commerce_expay', 'Transaction remote_id = @remote_id, order =  @order was not found', array('@order' => $order->order_id, '@remote_id' => $remote_payment_id), WATCHDOG_NOTICE);
    $validate = FALSE;
  }

  if ($validate) {
    $transaction = end($transactions);
    $transaction->payload['expay_updates'][] = array(
      'type' => 'success redirect',
      'data' => $params
    );
    commerce_expay_transaction_status_update($transaction, $remote_payment_order, $force_save = TRUE);
    if ($transaction->status == COMMERCE_PAYMENT_STATUS_FAILURE) {
      $validate = FALSE;
    }
  }

  return $validate;
}

/**
 * Cancellation callback for the redirected payments.
 *
 * @param commerce_order $order
 *  The Commerce Order.
 * @param array $payment_method
 *  The payment method.
 */
function commerce_expay_redirect_form_back($order, $payment_method) {

  $params = drupal_get_query_parameters();
  if (!empty($params)) {
    $error_message = t('There was a problem processing your transaction. Please try again later.');
    // In case if redirect comes from Expay.
    if (empty($params['pid']) || empty($params['order'])) {
      watchdog('commerce_expay', 'Wrong params for order @order during back redirect', array('@order' => $order->order_id), WATCHDOG_NOTICE);
      drupal_set_message(check_plain($error_message), 'error', TRUE);
      return;
    }

    $remote_payment_id = $params['pid'];
    $remote_payment_order = $params['order'];
    $options = array(
      'order_id' => $order->order_id,
      'remote_id' => $remote_payment_id
    );
    $transactions = commerce_payment_transaction_load_multiple(array(), $options);
    if (count($transactions) > 0) {
      $transaction = end($transactions);
      $transaction->payload['expay_updates'][] = array(
        'type' => 'cancel redirect',
        'data' => $params
      );
      commerce_expay_transaction_status_update($transaction, $remote_payment_order, $force_save = TRUE);
    }
    else {
      watchdog('commerce_expay', 'Transaction remote_id = @remote_id, order =  @order was not found', array('@order' => $order->order_id, '@remote_id' => $remote_payment_id), WATCHDOG_NOTICE);
      drupal_set_message(check_plain($error_message), 'error', TRUE);
      return;
    }
    drupal_set_message(check_plain($error_message), 'error', TRUE);
  }
  else {
    $error_message = t('Your transaction was canceled. Please try again.');
    drupal_set_message(check_plain($error_message), 'error', TRUE);
    // Cancel transaction on back redirect.
    $options = array(
      'order_id' => $order->order_id,
      'status' => COMMERCE_PAYMENT_STATUS_PENDING
    );
    $transactions = commerce_payment_transaction_load_multiple(array(), $options);
    if (count($transactions) > 0) {
      $transaction = end($transactions);
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('Transaction canceled by user on cancel URL');
      commerce_payment_transaction_save($transaction);
    }
    else {
      watchdog('commerce_expay', 'No transaction was found in order @order during back redirect', array('@order' => $order->order_id), WATCHDOG_NOTICE);
    }
  }
}

/**
 * Implements hook_cron().
 *
 */
function commerce_expay_cron() {
  $pending_statuses = array(
    EXPAY_GETSTATUS_PROCESSING_QUEUE,
    EXPAY_GETSTATUS_PROCESSING,
    EXPAY_GETSTATUS_WAITING_PAYER
  );
  $time_offset = variable_get('commerce_expay_cron_time_offset', 3600);
  $range = variable_get('commerce_expay_cron_range', 100);

  $result = db_select('commerce_payment_transaction', 'cpt')
    ->fields('cpt', array('transaction_id', 'order_id', 'remote_id'))
    ->condition('cpt.payment_method', 'commerce_expay')
    ->condition('cpt.remote_status', $pending_statuses, 'IN')
    ->condition('cpt.status', COMMERCE_PAYMENT_STATUS_PENDING)
    ->condition('cpt.changed', REQUEST_TIME - $time_offset, '<')
    ->orderBy('cpt.transaction_id', 'ASC')
    ->range(0, $range)
    ->execute();
  if (!empty($result)) {
    while ($row = $result->fetchAssoc()) {
      $transaction = commerce_payment_transaction_load($row['transaction_id']);
      $remote_payment = $transaction->payload['expay_payment'];
      commerce_expay_transaction_status_update($transaction, $remote_payment['order'], $force_save = FALSE);
      commerce_payment_transaction_save($transaction);
    }
  }
}
